CREATE EXTENSION pg_tde;
\getenv root_token_file VAULT_ROOT_TOKEN_FILE
\getenv cacert_file VAULT_CACERT_FILE
-- FAILS as mount path does not exist
SELECT pg_tde_add_database_key_provider_vault_v2('vault-incorrect', 'https://127.0.0.1:8200', 'DUMMY-MOUNT-PATH', :'root_token_file', :'cacert_file');
ERROR:  failed to get mount info for "https://127.0.0.1:8200" at mountpoint "DUMMY-MOUNT-PATH" (HTTP 400)
-- FAILS as it's not supported engine type
SELECT pg_tde_add_database_key_provider_vault_v2('vault-incorrect', 'https://127.0.0.1:8200', 'cubbyhole', :'root_token_file', :'cacert_file');
ERROR:  vault mount at "cubbyhole" has unsupported engine type "cubbyhole"
HINT:  The only supported vault engine type is Key/Value version "2"
-- FAILS as it's not supported engine version
SELECT pg_tde_add_database_key_provider_vault_v2('vault-incorrect', 'https://127.0.0.1:8200', 'kv-v1', :'root_token_file', :'cacert_file');
ERROR:  vault mount at "kv-v1" has unsupported Key/Value engine version "1"
HINT:  The only supported vault engine type is Key/Value version "2"
SELECT pg_tde_add_database_key_provider_vault_v2('vault-v2', 'https://127.0.0.1:8200', 'secret', :'root_token_file', :'cacert_file');
 pg_tde_add_database_key_provider_vault_v2 
-------------------------------------------
 
(1 row)

SELECT pg_tde_create_key_using_database_key_provider('vault-v2-key', 'vault-v2');
 pg_tde_create_key_using_database_key_provider 
-----------------------------------------------
 
(1 row)

SELECT pg_tde_set_key_using_database_key_provider('vault-v2-key', 'vault-v2');
 pg_tde_set_key_using_database_key_provider 
--------------------------------------------
 
(1 row)

CREATE TABLE test_enc(
	  id SERIAL,
	  k INTEGER DEFAULT '0' NOT NULL,
	  PRIMARY KEY (id)
	) USING tde_heap;
INSERT INTO test_enc (k) VALUES (1);
INSERT INTO test_enc (k) VALUES (2);
INSERT INTO test_enc (k) VALUES (3);
SELECT * from test_enc;
 id | k 
----+---
  1 | 1
  2 | 2
  3 | 3
(3 rows)

SELECT pg_tde_verify_key();
 pg_tde_verify_key 
-------------------
 
(1 row)

DROP TABLE test_enc;
-- Creating provider fails if we can't connect to vault
SELECT pg_tde_add_database_key_provider_vault_v2('will-not-work', 'https://127.0.0.1:61', 'secret', :'root_token_file', :'cacert_file');
ERROR:  HTTP(S) request to keyring provider "will-not-work" failed
-- Changing provider fails if we can't connect to vault
SELECT pg_tde_change_database_key_provider_vault_v2('vault-v2', 'https://127.0.0.1:61', 'secret', :'root_token_file', :'cacert_file');
ERROR:  HTTP(S) request to keyring provider "vault-v2" failed
-- HTTPS without cert fails
SELECT pg_tde_change_database_key_provider_vault_v2('vault-v2', 'https://127.0.0.1:8200', 'secret', :'root_token_file', NULL);
ERROR:  HTTP(S) request to keyring provider "vault-v2" failed
-- HTTP against HTTPS server fails
SELECT pg_tde_change_database_key_provider_vault_v2('vault-v2', 'http://127.0.0.1:8200', 'secret', :'root_token_file', NULL);
ERROR:  failed to get mount info for "http://127.0.0.1:8200" at mountpoint "secret" (HTTP 400)
-- Namespaces are supported, try using keys in a namespace. This test expect that the 'pgns' namespace exists, and it has a kv2 engine named 'secret'
SELECT pg_tde_add_database_key_provider_vault_v2('vault-v2ns', 'https://127.0.0.1:8200', 'secret', :'root_token_file', :'cacert_file', 'pgns');
 pg_tde_add_database_key_provider_vault_v2 
-------------------------------------------
 
(1 row)

SELECT pg_tde_create_key_using_database_key_provider('vault-v2-key-in-ns', 'vault-v2ns');
 pg_tde_create_key_using_database_key_provider 
-----------------------------------------------
 
(1 row)

SELECT pg_tde_set_key_using_database_key_provider('vault-v2-key-in-ns', 'vault-v2ns');
 pg_tde_set_key_using_database_key_provider 
--------------------------------------------
 
(1 row)

CREATE TABLE test_enc(
	  id SERIAL,
	  k INTEGER DEFAULT '0' NOT NULL,
	  PRIMARY KEY (id)
	) USING tde_heap;
INSERT INTO test_enc (k) VALUES (1);
INSERT INTO test_enc (k) VALUES (2);
INSERT INTO test_enc (k) VALUES (3);
SELECT * from test_enc;
 id | k 
----+---
  1 | 1
  2 | 2
  3 | 3
(3 rows)

SELECT pg_tde_verify_key();
 pg_tde_verify_key 
-------------------
 
(1 row)

DROP TABLE test_enc;
DROP EXTENSION pg_tde;
